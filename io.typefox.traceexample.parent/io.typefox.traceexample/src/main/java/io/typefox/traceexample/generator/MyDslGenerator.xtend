/*
 * generated by Xtext 2.12.0-SNAPSHOT
 */
package io.typefox.traceexample.generator

import com.google.inject.Inject
import io.typefox.traceexample.myDsl.ClassDeclaration
import io.typefox.traceexample.myDsl.Model
import io.typefox.traceexample.myDsl.MyDslFactory
import io.typefox.traceexample.myDsl.Operation
import io.typefox.traceexample.myDsl.Property
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.generator.trace.node.Traced
import org.eclipse.xtext.generator.trace.node.TracingExtensionsForEMF

/**
 * A code generator that keeps track of traces between source and generated files.
 * 
 */
class MyDslGenerator extends AbstractGenerator {
	
	@TracingExtensionsForEMF(MyDslFactory)
	static class TraceExtensions {}
	
	@Inject extension TraceExtensions

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val m = resource.contents.head as Model
		
		fsa.generateTracedFile("foo/Bar.txt", m, '''
			// generated
			«FOR c : m.types»
				«generateClass(c)»
			«ENDFOR»
		''')
	}
	
	@Traced def generateClass(ClassDeclaration clazz) '''
		class «clazz._name» {
			«FOR m : clazz.members»
				«generateMember(m)»
			«ENDFOR»
		}
	'''
	
	@Traced def dispatch generateMember(Operation op) '''
		«op._name»(«FOR p : op.parameter»«p._name» : «p._type[name.name]»«ENDFOR») : «op._type[name.name]»
	'''
	
	@Traced def dispatch generateMember(Property op) '''
		«op._name» : «op._type[name.name]»
	'''
	
}
